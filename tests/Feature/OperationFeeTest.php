<?php

namespace Tests\Feature;

use App\DTOs\OperationDto;
use App\Enums\BusinessClientRulesEnum;
use App\Enums\DepositRulesEnum;
use App\Services\OperationFee\OperationFeeService;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\App;
use League\Csv\Reader;
use Tests\TestCase;

final class OperationFeeTest extends TestCase
{

    private  array $fees = [];


    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $records = Reader::createFromPath('files/data.csv')->getRecords();

        $service = App::make(OperationFeeService::class);

        foreach ($records as $record) {
            $operation = OperationDto::prepareFromCSV($record);

            $this->fees[] = $service->calculate($operation);
        }


    }

    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function test_operation_fees_charging_rules_correct()
    {
        //private client is charged when goes beyond limit
        $this->assertGreaterThan(0, $this->fees[0]);


        //private client not charged when is hit with exact limit
        $this->assertEquals(0, $this->fees[2]);

        //Deposit is charged correctly
        $this->assertEquals(DepositRulesEnum::CHARGE_RATE * 200, $this->fees[3]);

        //Business client is charged correctly for business
        $this->assertEquals(BusinessClientRulesEnum::WITHDRAW_RATE * 300, $this->fees[4]);


    }
}
